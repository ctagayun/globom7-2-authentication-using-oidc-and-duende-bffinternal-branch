Module 7: Authentication and Deployment

 1. API and React Deployment
    https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/f2de7518-23c4-4576-8877-2169ea14ab86
   
    - Deployment React Project
      
        - first do a production build in React:
              npm run buld --> creates "dist" folder
      
        - dist/index-Z8cH2rkp - contains all javscript files of entire application

    - Deployment API
      - do dotnet publish --> will create a Api/bin/Release. Contains many files,
        take note of Api.dll, Api.exe, Api.pdb

      - the ap can be started from .bin\release\net8.0
          -  cd .\bin\Release\net8.0\
          - dotnet api.dll
          - dotnet api.exe can also be used to start the app

      - automate production build 
          - open publish.ps1 
          - right click publish.ps1 --> "Open in Integrated Terminal"
          - higlight code in publish.ps1 that you want to run
          - then in the upper right corner of VSCode click "Run Selection" icon F8


 2. Authentication
     - https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/413387b5-b1dd-4ffd-baa0-3ce06fb26081

  

     1. Introduction Cookie Approach
          - https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/a98d4add-cc27-4356-bde1-b252cec75c72
        
          - https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/e405b0bb-51f8-4add-8058-8cf14e48326b

          - we always need a server-side app that can keep secrets. Heres the concept 
            of Cookie approach: 
              1. API serves the static assets of the React production 
              build and it has session endpoints such as login and logout. The api 
              is now a backend instead of API is more in order.

              2. it uses SameSite cookies. No cross-site use allowed. Except GET requests.

     2. Hosting React App inside Asp.netcore API project (Cookie approach)

          - first clone this AuthCookie branch of repo https://github.com/rolandguijt/ps-globomantics-webapi-react
          
          - then go to:
              https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/e405b0bb-51f8-4add-8058-8cf14e48326b

          - To see how it is done switch to branch AuthCookie
              - cd ./API --> create wwwroot folder. 

              - put the output (assets) of React project production build to ./api/wwwroot   
            
              - after that open program.cs (see my comments to determine what was changed)
                (see my comments on wehat was added/deleted)

              - in src/config.ts of react change the URL of the API'

           - next create ReactWeb/publish.ps1. It is a powershell script, to 
             automate copyin the output of the production build to wwwroot.

          - cd api --> dotnet run 
          - the React main page is displayed. Click Login --> and enter the following 
            in login form that is displayed: 
                Userid: roland
                Password: secret

   
  - Implementing Cookie Authentication
     - https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/5021002a-0cc6-410e-9f1d-0d92de2ac80d

     - open and modify program.cs 
         - add builder.services.AddAuthentication  (See commnets in Step 1 and Step2)

     - Step3: create Api/AccountController - create 3 MVC endpoints for session mangement in a new account

     - Step4: go to WebApplicationHouseExtensions and WebApplicationBidExtensions and put Authorize attribute
     on all endpoints

     - Step5: go back to Program.cs and declare "Policies" in  builder.Services.AddAuthorization(o => 

     - Step6: add to program.cs app.UseAuthorization();   Call authorization middleware

     - Next let's see what is needed in the React application  
         - https://app.pluralsight.com/ilx/video-courses/fbbac3b2-0e56-464b-92f2-0b877f92f12c/c2709893-6776-4589-bc6c-699eeb71d6a5/85458f50-80c4-4cf8-8469-76ae8123cf43

         - to support cookie authentication in React application modify:
           src/hooks/BidHooks and HouseHooks and instruxt Axios to send along the cookie 
           with each Ajax call. But in order not to repeat each insturection on 
           every endpoint:
               
               Step1: add "Axios.defaults.withCredntials" to src/main.tsx

               Step2: add a new file src/hooks/UserHooks

               Step3: go to src/main/App.tsx and call useFetchUser() hook;

               Step4: go to src/house/houseList  and useFetchUser() hook here too
                 Note: change the role of Roland to something than Admin. Publish the 
                 React app and do the dotnet run again to see if Add button is displayed

    - Implementing OpenId Connect with Duende BFF Internal
        - https://app.pluralsight.com/ilx/video-courses/clips/9cffc5ca-3327-4791-8bfb-ebefe626c66d


    - Implementing OpenId Connect with Duende BFF External